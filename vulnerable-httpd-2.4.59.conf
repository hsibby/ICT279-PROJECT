# Apache HTTPD 2.4.59 - Vulnerable Configuration for CVE-2024-38475
# WARNING: This configuration is intentionally vulnerable for educational/testing purposes
# DO NOT use this configuration in production environments

ServerRoot "/usr/local/apache2"
Listen 80

# Load essential modules
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule dir_module modules/mod_dir.so
LoadModule mime_module modules/mod_mime.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule alias_module modules/mod_alias.so

# Basic server configuration
ServerName localhost:80
DirectoryIndex index.html
DocumentRoot "/usr/local/apache2/htdocs"

# MIME types
TypesConfig conf/mime.types

# Basic directory permissions
<Directory />
    AllowOverride None
    Require all denied
</Directory>

<Directory "/usr/local/apache2/htdocs">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>

# ============================================================================
# VULNERABLE CONFIGURATION FOR CVE-2024-38475
# ============================================================================

# Enable RewriteEngine globally
RewriteEngine On

# Create a vulnerable directory structure simulation
# This creates directories that should be protected but become accessible via the vuln
<Directory "/usr/local/apache2/secret">
    Options None
    AllowOverride None
    Require all denied
</Directory>

<Directory "/usr/local/apache2/admin">
    Options None
    AllowOverride None
    Require all denied
</Directory>

# ============================================================================
# VULNERABLE REWRITE RULES - CVE-2024-38475
# ============================================================================

# VULNERABLE RULE 1: Using backreference as first segment
# This allows path traversal to access files outside intended directory
# The vulnerability occurs when $1 (backreference) is used as the first segment
RewriteRule ^/files/(.*)$ /$1 [L]

# VULNERABLE RULE 2: Using variable as first segment  
# Using environment variables as first path segment
RewriteCond %{HTTP_USER_AGENT} ^Mozilla
RewriteRule ^/browser/(.*)$ /%{HTTP_USER_AGENT}/$1 [L]

# VULNERABLE RULE 3: Complex backreference substitution
# Multiple backreferences where first segment comes from capture group
RewriteRule ^/docs/([^/]+)/(.*)$ /$1/restricted/$2 [L]

# VULNERABLE RULE 4: Variable substitution as first segment
# Using REQUEST_URI components unsafely
RewriteRule ^/api/v1/(.*)$ /%{REQUEST_METHOD}/$1 [L]

# VULNERABLE RULE 5: Query parameter as first segment
# Using query parameters to determine path (very dangerous)
RewriteCond %{QUERY_STRING} path=([^&]+)
RewriteRule ^/redirect$ /%1 [L,R=302]

# VULNERABLE RULE 6: Multiple backreferences with path manipulation
# Allows complex path traversal through multiple capture groups
RewriteRule ^/proxy/([^/]+)/([^/]+)/(.*)$ /$1/$2/../$3 [L]

# ============================================================================
# EXPLOITATION EXAMPLES (via HTTP requests):
# ============================================================================
# 1. GET /files/../../secret/confidential.txt
#    -> Resolves to: /../../secret/confidential.txt
#    -> Accesses: /usr/local/apache2/secret/confidential.txt
#
# 2. GET /files/../admin/config.php  
#    -> Resolves to: /../admin/config.php
#    -> Accesses: /usr/local/apache2/admin/config.php
#
# 3. GET /docs/..%2F..%2Fsecret/data.txt
#    -> Resolves to: /../secret/restricted/data.txt  
#    -> Bypasses access controls
#
# 4. GET /redirect?path=../secret/passwords.txt
#    -> Redirects to: /../secret/passwords.txt
#    -> Exposes protected directory
# ============================================================================

# Create some test content and vulnerable paths
Alias /secret "/usr/local/apache2/secret"
Alias /admin "/usr/local/apache2/admin"

# Additional vulnerable pattern - using HTTP headers
RewriteCond %{HTTP_X_REAL_IP} (.+)
RewriteRule ^/internal/(.*)$ /%1/logs/$1 [L]

# Log rewrite activity for analysis
LogLevel warn rewrite:trace3

# Error and access logs
ErrorLog logs/error_log
CustomLog logs/access_log combined

# Vulnerable file inclusion through rewrite
# This demonstrates how the vulnerability can lead to code execution
<Directory "/usr/local/apache2/htdocs/scripts">
    Options +ExecCGI
    AddHandler cgi-script .cgi .pl .py
    AllowOverride None
    Require all granted
</Directory>

# Rewrite rule that could execute unintended scripts
RewriteRule ^/execute/(.*)$ /scripts/$1 [L]

# Set unsafe flags that enable the vulnerability
# (In fixed versions, these would be restricted)
# Note: UnsafePrefixStat is the flag mentioned in the CVE that can re-enable unsafe behavior